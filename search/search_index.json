{"config":{"lang":["en"],"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"index.html","text":"Welcome to the High Performance Computing (HPC) documentation of the University of Bern Introduction Official documentation site of the high performance computing and the HPC cluster UBELIX. Currently, the UBELIX cluster runs about 330 compute nodes featuring almost 6\u2018300 CPU cores and about 300\u2018000 GPU cores. The infrastructure is available to all University personnel for their scientific work. The cluster can also be used by students within a scope of a thesis or a course. If your campus account is not yet activated for UBELIX, the Getting Started Guide might be a good place to get you started. UBELIX features a plethora of software and applications, which is outlined on the page Software, but the users are free to compile and install their own software within their home directories. If you are wondering\u2026 UBELIX is an acronym and stands for U niversity of Be rn Li nu x Cluster (Naming similarities to known Gauls are purely coincidental and not intended in any way). Job Monitoroing See what is currently running on UBELIX on the Job Monitoring pages. Acknowledging UBELIX When you present results generated using our cluster UBELIX, we kindly ask you to acknowledge the usage of the cluster. We would also highly appreciate if you could send us a copy of your papers, posters and presentations mentioning the UBELIX cluster. Public visibility of our cluster and documenting results are important for us to ensure long-term funding of UBELIX. Whenever the UBELIX infrastructure has been used to produce results used in a publication or poster, we kindly request citing the service in the acknowledgements: \"Calculations were performed on UBELIX (http://www.id.unibe.ch/hpc), the HPC cluster at the University of Bern.\" Press Kit Occasionally we are asked for images like diagrams illustrating the structure of UBELIX or even pictures of machines/storage or the like. Often this is due to the need to describe UBELIX within a research proposal. To support you with this, we provide a short text about UBELIX and some files to download. You can use all of this within your research proposal. COMING SOON IN 2020","title":"Home"},{"location":"index.html#welcome-to-the-high-performance-computing-hpc-documentation-of-the-university-of-bern","text":"","title":"Welcome to the High Performance Computing (HPC) documentation of the University of Bern"},{"location":"index.html#introduction","text":"Official documentation site of the high performance computing and the HPC cluster UBELIX. Currently, the UBELIX cluster runs about 330 compute nodes featuring almost 6\u2018300 CPU cores and about 300\u2018000 GPU cores. The infrastructure is available to all University personnel for their scientific work. The cluster can also be used by students within a scope of a thesis or a course. If your campus account is not yet activated for UBELIX, the Getting Started Guide might be a good place to get you started. UBELIX features a plethora of software and applications, which is outlined on the page Software, but the users are free to compile and install their own software within their home directories. If you are wondering\u2026 UBELIX is an acronym and stands for U niversity of Be rn Li nu x Cluster (Naming similarities to known Gauls are purely coincidental and not intended in any way). Job Monitoroing See what is currently running on UBELIX on the Job Monitoring pages.","title":"Introduction"},{"location":"index.html#acknowledging-ubelix","text":"When you present results generated using our cluster UBELIX, we kindly ask you to acknowledge the usage of the cluster. We would also highly appreciate if you could send us a copy of your papers, posters and presentations mentioning the UBELIX cluster. Public visibility of our cluster and documenting results are important for us to ensure long-term funding of UBELIX. Whenever the UBELIX infrastructure has been used to produce results used in a publication or poster, we kindly request citing the service in the acknowledgements: \"Calculations were performed on UBELIX (http://www.id.unibe.ch/hpc), the HPC cluster at the University of Bern.\"","title":"Acknowledging UBELIX"},{"location":"index.html#press-kit","text":"Occasionally we are asked for images like diagrams illustrating the structure of UBELIX or even pictures of machines/storage or the like. Often this is due to the need to describe UBELIX within a research proposal. To support you with this, we provide a short text about UBELIX and some files to download. You can use all of this within your research proposal. COMING SOON IN 2020","title":"Press Kit"},{"location":"code-of-conduct.html","text":"Code of Conduct On this page we list some expectations from our side and recommended practice that is crucial for maintaining a good and professional working relationship between the user and the system administrators. Most of those contents are quite self-explanatory while others help to reduce the amount of support time needed to allocate. General We assume that you are familiar with some basic knowledge about Linux command line (shell) navigation and shell scripting. If you never worked on the command line, consider some Linux tutorials on the subject first. We expect you to exploit this valuable documentation before asking for help. All that is needed to get some simple jobs done on UBELIX is documented here. Account Staff accounts are preferred over student accounts! If you currently use your student Campus Account to access UBELIX, but you also possess a staff Campus Account, get in contact with us so we can activate your staff Campus Account, migrate all your user data to the new account and deactivate your student account for UBELIX. Mailing List We communicate upcoming events (e.g. maintenance downtimes) on our mailing list. Make sure that you are subscribed to this list, otherwise you will miss important announcements. Security Do not share your account If using public key authentication, do not share your private key General Communication with the Cluster Administrators Use the support email address grid-support@id.unibe.ch for question regarding UBELIX. Do not use the personal email address of a cluster administrator. This is important because it keeps all administrators informed about the ongoing problem-solving process, and if one administrator is on vacation, another administrator can help you with your question For each new problem start a new conversation with a new subject. Avoid to write to us by replying to an old answer mail from the last problem that you received from us or even worse by replying to mailing list email you received from us. The point here is that though it looks like an ordinary email, you actually are opening a new ticket in our ticket system (or reopening an old ticket if replying to an old email). State your Campus Account username when communicating with the administrators. This helps us to identify you on the cluster faster. Use your official UniBE email address for the communication with the cluster administrators, not any *@hotmail.com addresses or the like. Problem-Solving Process Exploit resources provided by your institute/research group before asking the UBELIX staff about domain-specific problems. We make an effort to help you, but we are no experts in your field, hence a colleague from your group who uses the cluster to solve a similar problem like you do might be a better first contact Ask Google for help before contacting us. We often also just \u201cgoogle\u201d for an answer, and then forward the outcome to you. Do not ask for/expect step-by-step solutions to a problem. Sometimes we give step-by-step instructions, but generally you should use our answers to do some refined research on the problem. If you still stuck, we are happy to provide further support Always give an exact as possible description of the problem. Provide your username, error messages, the path to the job script, the id of the job, and other hints that make the problem-solving process as economic as possible. Housekeeping Clean up your home directory frequently, in particular before asking for an increase of your quota limit Do not save thousands of files in a single directory. Distribute the files to subdirectories Job Submission Before submitting the same job a hundred times, please verify that the job finishes successfully. We often experience that hundreds of jobs getting killed due to an invalid path referenced in the job script, which generates hundreds of notification mails in our system. Cluster Performance DO NOT run resource-intensive computations directly on the front-end server (submit host). This will have a negative impact on the performance of the whole cluster. Instead, submit such computations as a job to the cluster DO NOT run server applications (PostgreSQL server, web server, \u2026) on the front-end server (submit host). Such a program usually run as a background process (daemon) rather than being under the direct control of an interactive user. We will immediately kill such processes","title":"Code of Conduct"},{"location":"code-of-conduct.html#code-of-conduct","text":"On this page we list some expectations from our side and recommended practice that is crucial for maintaining a good and professional working relationship between the user and the system administrators. Most of those contents are quite self-explanatory while others help to reduce the amount of support time needed to allocate.","title":"Code of Conduct"},{"location":"code-of-conduct.html#general","text":"We assume that you are familiar with some basic knowledge about Linux command line (shell) navigation and shell scripting. If you never worked on the command line, consider some Linux tutorials on the subject first. We expect you to exploit this valuable documentation before asking for help. All that is needed to get some simple jobs done on UBELIX is documented here.","title":"General"},{"location":"code-of-conduct.html#account","text":"Staff accounts are preferred over student accounts! If you currently use your student Campus Account to access UBELIX, but you also possess a staff Campus Account, get in contact with us so we can activate your staff Campus Account, migrate all your user data to the new account and deactivate your student account for UBELIX.","title":"Account"},{"location":"code-of-conduct.html#mailing-list","text":"We communicate upcoming events (e.g. maintenance downtimes) on our mailing list. Make sure that you are subscribed to this list, otherwise you will miss important announcements.","title":"Mailing List"},{"location":"code-of-conduct.html#security","text":"Do not share your account If using public key authentication, do not share your private key","title":"Security"},{"location":"code-of-conduct.html#general-communication-with-the-cluster-administrators","text":"Use the support email address grid-support@id.unibe.ch for question regarding UBELIX. Do not use the personal email address of a cluster administrator. This is important because it keeps all administrators informed about the ongoing problem-solving process, and if one administrator is on vacation, another administrator can help you with your question For each new problem start a new conversation with a new subject. Avoid to write to us by replying to an old answer mail from the last problem that you received from us or even worse by replying to mailing list email you received from us. The point here is that though it looks like an ordinary email, you actually are opening a new ticket in our ticket system (or reopening an old ticket if replying to an old email). State your Campus Account username when communicating with the administrators. This helps us to identify you on the cluster faster. Use your official UniBE email address for the communication with the cluster administrators, not any *@hotmail.com addresses or the like.","title":"General Communication with the Cluster Administrators"},{"location":"code-of-conduct.html#problem-solving-process","text":"Exploit resources provided by your institute/research group before asking the UBELIX staff about domain-specific problems. We make an effort to help you, but we are no experts in your field, hence a colleague from your group who uses the cluster to solve a similar problem like you do might be a better first contact Ask Google for help before contacting us. We often also just \u201cgoogle\u201d for an answer, and then forward the outcome to you. Do not ask for/expect step-by-step solutions to a problem. Sometimes we give step-by-step instructions, but generally you should use our answers to do some refined research on the problem. If you still stuck, we are happy to provide further support Always give an exact as possible description of the problem. Provide your username, error messages, the path to the job script, the id of the job, and other hints that make the problem-solving process as economic as possible.","title":"Problem-Solving Process"},{"location":"code-of-conduct.html#housekeeping","text":"Clean up your home directory frequently, in particular before asking for an increase of your quota limit Do not save thousands of files in a single directory. Distribute the files to subdirectories","title":"Housekeeping"},{"location":"code-of-conduct.html#job-submission","text":"Before submitting the same job a hundred times, please verify that the job finishes successfully. We often experience that hundreds of jobs getting killed due to an invalid path referenced in the job script, which generates hundreds of notification mails in our system.","title":"Job Submission"},{"location":"code-of-conduct.html#cluster-performance","text":"DO NOT run resource-intensive computations directly on the front-end server (submit host). This will have a negative impact on the performance of the whole cluster. Instead, submit such computations as a job to the cluster DO NOT run server applications (PostgreSQL server, web server, \u2026) on the front-end server (submit host). Such a program usually run as a background process (daemon) rather than being under the direct control of an interactive user. We will immediately kill such processes","title":"Cluster Performance"},{"location":"contributing.html","text":"Contributing You can support the UBELIX cluster in different ways: Investments Documentation Improvements Investments Some text about money\u2026 Documentation Improvements Some text aboutn contirbuting to the user guide.","title":"Contributing"},{"location":"contributing.html#contributing","text":"You can support the UBELIX cluster in different ways: Investments Documentation Improvements","title":"Contributing"},{"location":"contributing.html#investments","text":"Some text about money\u2026","title":"Investments"},{"location":"contributing.html#documentation-improvements","text":"Some text aboutn contirbuting to the user guide.","title":"Documentation Improvements"},{"location":"mdcheat.html","text":"Markdown Cheatsheet This page outlines all stuff available by installing the base Python-Markdown (comes with MkDocs) and the additional bundle PyMdown Extensions . Markdown Cheatsheet Headings The 3rd level The 4th level The 5th level The 6th level Headings with secondary text The 3rd level with secondary text The 4th level with secondary text The 5th level with secondary text The 6th level with secondary text Emphasis Lists Links Images Code and Syntax Highlighting Tables Blockquotes Inline HTML Horizontal Rule Line Breaks YouTube Videos Admonition Abbreviations Definition Lists Footnotes Headings ### The 3rd level #### The 4th level ##### The 5th level ###### The 6th level ## Headings <small>with secondary text</small> ### The 3rd level <small>with secondary text</small> #### The 4th level <small>with secondary text</small> ##### The 5th level <small>with secondary text</small> ###### The 6th level <small>with secondary text</small> The 3rd level The 4th level The 5th level The 6th level Headings with secondary text The 3rd level with secondary text The 4th level with secondary text The 5th level with secondary text The 6th level with secondary text Emphasis Emphasis, aka italics, with *asterisks* or _underscores_. Strong emphasis, aka bold, with **asterisks** or __underscores__. Combined emphasis with **asterisks and _underscores_**. Strikethrough uses two tildes. ~~Scratch this.~~ Emphasis, aka italics, with asterisks or underscores . Strong emphasis, aka bold, with asterisks or underscores . Combined emphasis with asterisks and underscores . Strikethrough uses two tildes. ~~Scratch this.~~ Lists (In this example, leading and trailing spaces are shown with with dots: \u22c5) 1. First ordered list item 2. Another item \u22c5\u22c5\u22c5\u22c5* Unordered sub-list. \u22c5\u22c5\u22c5\u22c5* Item 2 \u22c5\u22c5\u22c5\u22c5* Item 3 1. Actual numbers don't matter, just that it's a number \u22c5\u22c5\u22c5\u22c51. Ordered sub-list \u22c5\u22c5\u22c5\u22c5\u22c5\u22c5\u22c5\u22c51. Ordered subsub-list \u22c5\u22c5\u22c5\u22c5\u22c5\u22c5\u22c5\u22c51. Item 2 \u22c5\u22c5\u22c5\u22c5\u22c5\u22c5\u22c5\u22c51. Item 3 \u22c5\u22c5\u22c5\u22c51. Item 2 \u22c5\u22c5\u22c5\u22c51. Item 3 4. And another item. \u22c5\u22c5\u22c5\u22c5You can have properly indented paragraphs within list items. Notice the blank line above, and the leading spaces (at least one, but we'll use three here to also align the raw Markdown). \u22c5\u22c5\u22c5\u22c5To have a line break without a paragraph, you will need to use two trailing spaces.\u22c5\u22c5 \u22c5\u22c5\u22c5\u22c5Note that this line is separate, but within the same paragraph.\u22c5\u22c5 \u22c5\u22c5\u22c5\u22c5(This is contrary to the typical GFM line break behaviour, where trailing spaces are not required.) * Unordered list can use asterisks - Or minuses + Or pluses First ordered list item Another item Unordered sub-list. Item 2 Item 3 Actual numbers don\u2019t matter, just that it\u2019s a number Ordered sub-list Ordered subsub-list Item 2 Item 3 Item 2 Item 3 And another item. You can have properly indented paragraphs within list items. Notice the blank line above, and the leading spaces (at least one, but we\u2019ll use three here to also align the raw Markdown). To have a line break without a paragraph, you will need to use two trailing spaces. Note that this line is separate, but within the same paragraph. (This is contrary to the typical GFM line break behaviour, where trailing spaces are not required.) Unordered list can use asterisks Or minuses Or pluses Links There are two ways to create links. [I'm an inline-style link](https://www.google.com) [I'm an inline-style link with title](https://www.google.com \"Google's Homepage\") [I'm a reference-style link][Arbitrary case-insensitive reference text] [I'm a relative reference to a repository file](../blob/master/LICENSE) [You can use numbers for reference-style link definitions][1] Or leave it empty and use the [link text itself]. URLs and URLs in angle brackets will automatically get turned into links. http://www.example.com or <http://www.example.com> and sometimes example.com (but not on Github, for example). Some text to show that the reference links can follow later. [arbitrary case-insensitive reference text]: https://www.mozilla.org [1]: http://slashdot.org [link text itself]: http://www.reddit.com I\u2019m an inline-style link I\u2019m an inline-style link with title I\u2019m a reference-style link I\u2019m a relative reference to a repository file You can use numbers for reference-style link definitions Or leave it empty and use the link text itself . URLs and URLs in angle brackets will automatically get turned into links. http://www.example.com or http://www.example.com and sometimes example.com (but not on Github, for example). Some text to show that the reference links can follow later. Images Here's our logo (hover to see the title text): Inline-style: ![alt text](https://github.com/adam-p/markdown-here/raw/master/src/common/images/icon48.png \"Logo Title Text 1\") Reference-style: ![alt text][logo] [logo]: https://github.com/adam-p/markdown-here/raw/master/src/common/images/icon48.png \"Logo Title Text 2\" Here\u2019s our logo (hover to see the title text): Inline-style: Reference-style: Code and Syntax Highlighting Code blocks are part of the Markdown spec, but syntax highlighting isn\u2019t. However, many renderers \u2013 like Github\u2019s and Markdown Here \u2013 support syntax highlighting. Which languages are supported and how those language names should be written will vary from renderer to renderer. Markdown Here supports highlighting for dozens of languages (and not-really-languages, like diffs and HTTP headers); to see the complete list, and how to write the language names, see the highlight.js demo page . Inline `code` has `back-ticks around` it. Inline code has back-ticks around it. Blocks of code are either fenced by lines with three back-ticks ``` , or are indented with four spaces. I recommend only using the fenced code blocks \u2013 they\u2019re easier and only they support syntax highlighting. var s = \"JavaScript syntax highlighting\" ; alert ( s ); s = \"Python syntax highlighting\" print s No language indicated, so no syntax highlighting in Markdown Here (varies on Github). But let's throw in a <b>tag</b>. Even tabbed code example for different language are possible: Bash #!/bin/bash STR = \"Hello World!\" echo $STR C #include int main(void) { printf ( \"hello, world \\n \" ); } C++ #include <iostream> int main () { std :: cout << \"Hello, world! \\n \" ; return 0 ; } C# using System ; class Program { static void Main ( string [] args ) { Console . WriteLine ( \"Hello, world!\" ); } } Tables Tables aren\u2019t part of the core Markdown spec, but they are part of GFM and Markdown Here supports them. They are an easy way of adding tables to your email \u2013 a task that would otherwise require copy-pasting from another application. Colons can be used to align columns. | Tables | Are | Cool | | ------------- |:-------------:| -----:| | col 3 is | right-aligned | $1600 | | col 2 is | centered | $12 | | zebra stripes | are neat | $1 | There must be at least 3 dashes separating each header cell. The outer pipes (|) are optional, and you don't need to make the raw Markdown line up prettily. You can also use inline Markdown. Markdown | Less | Pretty --- | --- | --- *Still* | `renders` | **nicely** 1 | 2 | 3 Colons can be used to align columns. Tables Are Cool col 3 is right-aligned $1600 col 2 is centered $12 zebra stripes are neat $1 There must be at least 3 dashes separating each header cell. The outer pipes (|) are optional, and you don\u2019t need to make the raw Markdown line up prettily. You can also use inline Markdown. Markdown Less Pretty Still renders nicely 1 2 3 Blockquotes > Blockquotes are very handy in email to emulate reply text. > This line is part of the same quote. Quote break. > This is a very long line that will still be quoted properly when it wraps. Oh boy let's keep writing to make sure this is long enough to actually wrap for everyone. Oh, you can *put* **Markdown** into a blockquote. Blockquotes are very handy in email to emulate reply text. This line is part of the same quote. Quote break. This is a very long line that will still be quoted properly when it wraps. Oh boy let\u2019s keep writing to make sure this is long enough to actually wrap for everyone. Oh, you can put Markdown into a blockquote. Blockquote nesting is possible: > **Sed aliquet**, neque at rutrum mollis, neque nisi tincidunt nibh, vitae faucibus lacus nunc at lacus. Nunc scelerisque, quam id cursus sodales, lorem [libero fermentum](#) urna, ut efficitur elit ligula et nunc. > > Mauris dictum mi lacus, sit amet pellentesque urna vehicula fringilla. Ut sit amet placerat ante. Proin sed **elementum** __nulla__. Nunc vitae sem odio. Suspendisse ac eros arcu. Vivamus orci erat, volutpat a tempor et, rutrum. eu odio. > > > `Suspendisse rutrum facilisis risus`, eu posuere neque commodo a. Interdum et malesuada fames ac ante ipsum primis in faucibus. Sed nec leo bibendum, sodales mauris ut, tincidunt massa. Sed aliquet , neque at rutrum mollis, neque nisi tincidunt nibh, vitae faucibus lacus nunc at lacus. Nunc scelerisque, quam id cursus sodales, lorem libero fermentum urna, ut efficitur elit ligula et nunc. Mauris dictum mi lacus, sit amet pellentesque urna vehicula fringilla. Ut sit amet placerat ante. Proin sed elementum nulla. Nunc vitae sem odio. Suspendisse ac eros arcu. Vivamus orci erat, volutpat a tempor et, rutrum. eu odio. Suspendisse rutrum facilisis risus , eu posuere neque commodo a. Interdum et malesuada fames ac ante ipsum primis in faucibus. Sed nec leo bibendum, sodales mauris ut, tincidunt massa. Other content blocks within a blockquote Vestibulum vitae orci quis ante viverra ultricies ut eget turpis. Sed eu lectus dapibus, eleifend nulla varius, lobortis turpis. In ac hendrerit nisl, sit amet laoreet nibh. var _extends = function ( target ) { for ( var i = 1 ; i < arguments . length ; i ++ ) { var source = arguments [ i ]; for ( var key in source ) { target [ key ] = source [ key ]; } } return target ; }; Praesent at :::js return target , sodales nibh vel, tempor felis. Fusce vel lacinia lacus. Suspendisse rhoncus nunc non nisi iaculis ultrices. Donec consectetur mauris non neque imperdiet, eget volutpat libero. Inline HTML You can also use raw HTML in your Markdown, and it\u2019ll mostly work pretty well. Horizontal Rule Three or more... --- Hyphens *** Asterisks ___ Underscores Three or more\u2026 Hyphens Asterisks Underscores Line Breaks My basic recommendation for learning how line breaks work is to experiment and discover \u2013 hit <Enter> once (i.e., insert one newline), then hit it twice (i.e., insert two newlines), see what happens. You\u2019ll soon learn to get what you want. \u201cMarkdown Toggle\u201d is your friend. Here are some things to try out: Here's a line for us to start with. This line is separated from the one above by two newlines, so it will be a *separate paragraph*. This line is also a separate paragraph, but... This line is only separated by a single newline, so it's a separate line in the *same paragraph*. Here\u2019s a line for us to start with. This line is separated from the one above by two newlines, so it will be a separate paragraph . This line is also begins a separate paragraph, but\u2026 This line is only separated by a single newline, so it\u2019s a separate line in the same paragraph . YouTube Videos They can\u2019t be added directly but you can add an image with a link to the video like this: <a href=\"http://www.youtube.com/watch?feature=player_embedded&v=YOUTUBE_VIDEO_ID_HERE \" target=\"_blank\"><img src=\"http://img.youtube.com/vi/YOUTUBE_VIDEO_ID_HERE/0.jpg\" alt=\"IMAGE ALT TEXT HERE\" width=\"240\" height=\"180\" border=\"10\" /></a> Or, in pure Markdown, but losing the image sizing and border: [![IMAGE ALT TEXT HERE](http://img.youtube.com/vi/YOUTUBE_VIDEO_ID_HERE/0.jpg)](http://www.youtube.com/watch?v=YOUTUBE_VIDEO_ID_HERE) Referencing a bug by #bugID in your git commit links it to the slip. For example #1. Admonition !!! type \"optional explicit title within double quotes\" Any number of other indented markdown elements. This is the second paragraph. Some title Any number of other indented markdown elements. This is the second paragraph. And this is outside the admonition again. If you don\u2019t want a title, use a blank string \u201c\u201d. Don\u2019t do this at home! rST suggests the following \u201ctypes\u201d: attention, caution, danger, error, hint, important, note, tip, and warning: Some title This is type note Some title This is type hint Some title This is type tip Some title This is type important Some title This is type attention Some title This is type caution Some title This is type warning Some title This is type danger Some title This is type error Abbreviations The HTML specification is maintained by the W3C. *[HTML]: Hyper Text Markup Language *[W3C]: World Wide Web Consortium The HTML specification is maintained by the W3C . Definition Lists Apple : Pomaceous fruit of plants of the genus Malus in the family Rosaceae. Orange : The fruit of an evergreen tree of the genus Citrus. Apple Pomaceous fruit of plants of the genus Malus in the family Rosaceae. Orange The fruit of an evergreen tree of the genus Citrus. Footnotes Footnotes 1 have a label 2 and the footnote\u2019s content. Another Footnote 3 License: CC-BY This is a footnote content. \u21a9 A footnote on the label: \u201c@#$%\u201d. \u21a9 Another content \u21a9","title":"Markdown Cheatsheet"},{"location":"mdcheat.html#markdown-cheatsheet","text":"This page outlines all stuff available by installing the base Python-Markdown (comes with MkDocs) and the additional bundle PyMdown Extensions . Markdown Cheatsheet Headings The 3rd level The 4th level The 5th level The 6th level Headings with secondary text The 3rd level with secondary text The 4th level with secondary text The 5th level with secondary text The 6th level with secondary text Emphasis Lists Links Images Code and Syntax Highlighting Tables Blockquotes Inline HTML Horizontal Rule Line Breaks YouTube Videos Admonition Abbreviations Definition Lists Footnotes","title":"Markdown Cheatsheet"},{"location":"mdcheat.html#headings","text":"### The 3rd level #### The 4th level ##### The 5th level ###### The 6th level ## Headings <small>with secondary text</small> ### The 3rd level <small>with secondary text</small> #### The 4th level <small>with secondary text</small> ##### The 5th level <small>with secondary text</small> ###### The 6th level <small>with secondary text</small>","title":"Headings"},{"location":"mdcheat.html#the-3rd-level","text":"","title":"The 3rd level"},{"location":"mdcheat.html#the-4th-level","text":"","title":"The 4th level"},{"location":"mdcheat.html#the-5th-level","text":"","title":"The 5th level"},{"location":"mdcheat.html#the-6th-level","text":"","title":"The 6th level"},{"location":"mdcheat.html#headings-with-secondary-text","text":"","title":"Headings with secondary text"},{"location":"mdcheat.html#the-3rd-level-with-secondary-text","text":"","title":"The 3rd level with secondary text"},{"location":"mdcheat.html#the-4th-level-with-secondary-text","text":"","title":"The 4th level with secondary text"},{"location":"mdcheat.html#the-5th-level-with-secondary-text","text":"","title":"The 5th level with secondary text"},{"location":"mdcheat.html#the-6th-level-with-secondary-text","text":"","title":"The 6th level with secondary text"},{"location":"mdcheat.html#emphasis","text":"Emphasis, aka italics, with *asterisks* or _underscores_. Strong emphasis, aka bold, with **asterisks** or __underscores__. Combined emphasis with **asterisks and _underscores_**. Strikethrough uses two tildes. ~~Scratch this.~~ Emphasis, aka italics, with asterisks or underscores . Strong emphasis, aka bold, with asterisks or underscores . Combined emphasis with asterisks and underscores . Strikethrough uses two tildes. ~~Scratch this.~~","title":"Emphasis"},{"location":"mdcheat.html#lists","text":"(In this example, leading and trailing spaces are shown with with dots: \u22c5) 1. First ordered list item 2. Another item \u22c5\u22c5\u22c5\u22c5* Unordered sub-list. \u22c5\u22c5\u22c5\u22c5* Item 2 \u22c5\u22c5\u22c5\u22c5* Item 3 1. Actual numbers don't matter, just that it's a number \u22c5\u22c5\u22c5\u22c51. Ordered sub-list \u22c5\u22c5\u22c5\u22c5\u22c5\u22c5\u22c5\u22c51. Ordered subsub-list \u22c5\u22c5\u22c5\u22c5\u22c5\u22c5\u22c5\u22c51. Item 2 \u22c5\u22c5\u22c5\u22c5\u22c5\u22c5\u22c5\u22c51. Item 3 \u22c5\u22c5\u22c5\u22c51. Item 2 \u22c5\u22c5\u22c5\u22c51. Item 3 4. And another item. \u22c5\u22c5\u22c5\u22c5You can have properly indented paragraphs within list items. Notice the blank line above, and the leading spaces (at least one, but we'll use three here to also align the raw Markdown). \u22c5\u22c5\u22c5\u22c5To have a line break without a paragraph, you will need to use two trailing spaces.\u22c5\u22c5 \u22c5\u22c5\u22c5\u22c5Note that this line is separate, but within the same paragraph.\u22c5\u22c5 \u22c5\u22c5\u22c5\u22c5(This is contrary to the typical GFM line break behaviour, where trailing spaces are not required.) * Unordered list can use asterisks - Or minuses + Or pluses First ordered list item Another item Unordered sub-list. Item 2 Item 3 Actual numbers don\u2019t matter, just that it\u2019s a number Ordered sub-list Ordered subsub-list Item 2 Item 3 Item 2 Item 3 And another item. You can have properly indented paragraphs within list items. Notice the blank line above, and the leading spaces (at least one, but we\u2019ll use three here to also align the raw Markdown). To have a line break without a paragraph, you will need to use two trailing spaces. Note that this line is separate, but within the same paragraph. (This is contrary to the typical GFM line break behaviour, where trailing spaces are not required.) Unordered list can use asterisks Or minuses Or pluses","title":"Lists"},{"location":"mdcheat.html#links","text":"There are two ways to create links. [I'm an inline-style link](https://www.google.com) [I'm an inline-style link with title](https://www.google.com \"Google's Homepage\") [I'm a reference-style link][Arbitrary case-insensitive reference text] [I'm a relative reference to a repository file](../blob/master/LICENSE) [You can use numbers for reference-style link definitions][1] Or leave it empty and use the [link text itself]. URLs and URLs in angle brackets will automatically get turned into links. http://www.example.com or <http://www.example.com> and sometimes example.com (but not on Github, for example). Some text to show that the reference links can follow later. [arbitrary case-insensitive reference text]: https://www.mozilla.org [1]: http://slashdot.org [link text itself]: http://www.reddit.com I\u2019m an inline-style link I\u2019m an inline-style link with title I\u2019m a reference-style link I\u2019m a relative reference to a repository file You can use numbers for reference-style link definitions Or leave it empty and use the link text itself . URLs and URLs in angle brackets will automatically get turned into links. http://www.example.com or http://www.example.com and sometimes example.com (but not on Github, for example). Some text to show that the reference links can follow later.","title":"Links"},{"location":"mdcheat.html#images","text":"Here's our logo (hover to see the title text): Inline-style: ![alt text](https://github.com/adam-p/markdown-here/raw/master/src/common/images/icon48.png \"Logo Title Text 1\") Reference-style: ![alt text][logo] [logo]: https://github.com/adam-p/markdown-here/raw/master/src/common/images/icon48.png \"Logo Title Text 2\" Here\u2019s our logo (hover to see the title text): Inline-style: Reference-style:","title":"Images"},{"location":"mdcheat.html#code-and-syntax-highlighting","text":"Code blocks are part of the Markdown spec, but syntax highlighting isn\u2019t. However, many renderers \u2013 like Github\u2019s and Markdown Here \u2013 support syntax highlighting. Which languages are supported and how those language names should be written will vary from renderer to renderer. Markdown Here supports highlighting for dozens of languages (and not-really-languages, like diffs and HTTP headers); to see the complete list, and how to write the language names, see the highlight.js demo page . Inline `code` has `back-ticks around` it. Inline code has back-ticks around it. Blocks of code are either fenced by lines with three back-ticks ``` , or are indented with four spaces. I recommend only using the fenced code blocks \u2013 they\u2019re easier and only they support syntax highlighting. var s = \"JavaScript syntax highlighting\" ; alert ( s ); s = \"Python syntax highlighting\" print s No language indicated, so no syntax highlighting in Markdown Here (varies on Github). But let's throw in a <b>tag</b>. Even tabbed code example for different language are possible: Bash #!/bin/bash STR = \"Hello World!\" echo $STR C #include int main(void) { printf ( \"hello, world \\n \" ); } C++ #include <iostream> int main () { std :: cout << \"Hello, world! \\n \" ; return 0 ; } C# using System ; class Program { static void Main ( string [] args ) { Console . WriteLine ( \"Hello, world!\" ); } }","title":"Code and Syntax Highlighting"},{"location":"mdcheat.html#tables","text":"Tables aren\u2019t part of the core Markdown spec, but they are part of GFM and Markdown Here supports them. They are an easy way of adding tables to your email \u2013 a task that would otherwise require copy-pasting from another application. Colons can be used to align columns. | Tables | Are | Cool | | ------------- |:-------------:| -----:| | col 3 is | right-aligned | $1600 | | col 2 is | centered | $12 | | zebra stripes | are neat | $1 | There must be at least 3 dashes separating each header cell. The outer pipes (|) are optional, and you don't need to make the raw Markdown line up prettily. You can also use inline Markdown. Markdown | Less | Pretty --- | --- | --- *Still* | `renders` | **nicely** 1 | 2 | 3 Colons can be used to align columns. Tables Are Cool col 3 is right-aligned $1600 col 2 is centered $12 zebra stripes are neat $1 There must be at least 3 dashes separating each header cell. The outer pipes (|) are optional, and you don\u2019t need to make the raw Markdown line up prettily. You can also use inline Markdown. Markdown Less Pretty Still renders nicely 1 2 3","title":"Tables"},{"location":"mdcheat.html#blockquotes","text":"> Blockquotes are very handy in email to emulate reply text. > This line is part of the same quote. Quote break. > This is a very long line that will still be quoted properly when it wraps. Oh boy let's keep writing to make sure this is long enough to actually wrap for everyone. Oh, you can *put* **Markdown** into a blockquote. Blockquotes are very handy in email to emulate reply text. This line is part of the same quote. Quote break. This is a very long line that will still be quoted properly when it wraps. Oh boy let\u2019s keep writing to make sure this is long enough to actually wrap for everyone. Oh, you can put Markdown into a blockquote. Blockquote nesting is possible: > **Sed aliquet**, neque at rutrum mollis, neque nisi tincidunt nibh, vitae faucibus lacus nunc at lacus. Nunc scelerisque, quam id cursus sodales, lorem [libero fermentum](#) urna, ut efficitur elit ligula et nunc. > > Mauris dictum mi lacus, sit amet pellentesque urna vehicula fringilla. Ut sit amet placerat ante. Proin sed **elementum** __nulla__. Nunc vitae sem odio. Suspendisse ac eros arcu. Vivamus orci erat, volutpat a tempor et, rutrum. eu odio. > > > `Suspendisse rutrum facilisis risus`, eu posuere neque commodo a. Interdum et malesuada fames ac ante ipsum primis in faucibus. Sed nec leo bibendum, sodales mauris ut, tincidunt massa. Sed aliquet , neque at rutrum mollis, neque nisi tincidunt nibh, vitae faucibus lacus nunc at lacus. Nunc scelerisque, quam id cursus sodales, lorem libero fermentum urna, ut efficitur elit ligula et nunc. Mauris dictum mi lacus, sit amet pellentesque urna vehicula fringilla. Ut sit amet placerat ante. Proin sed elementum nulla. Nunc vitae sem odio. Suspendisse ac eros arcu. Vivamus orci erat, volutpat a tempor et, rutrum. eu odio. Suspendisse rutrum facilisis risus , eu posuere neque commodo a. Interdum et malesuada fames ac ante ipsum primis in faucibus. Sed nec leo bibendum, sodales mauris ut, tincidunt massa. Other content blocks within a blockquote Vestibulum vitae orci quis ante viverra ultricies ut eget turpis. Sed eu lectus dapibus, eleifend nulla varius, lobortis turpis. In ac hendrerit nisl, sit amet laoreet nibh. var _extends = function ( target ) { for ( var i = 1 ; i < arguments . length ; i ++ ) { var source = arguments [ i ]; for ( var key in source ) { target [ key ] = source [ key ]; } } return target ; }; Praesent at :::js return target , sodales nibh vel, tempor felis. Fusce vel lacinia lacus. Suspendisse rhoncus nunc non nisi iaculis ultrices. Donec consectetur mauris non neque imperdiet, eget volutpat libero.","title":"Blockquotes"},{"location":"mdcheat.html#inline-html","text":"You can also use raw HTML in your Markdown, and it\u2019ll mostly work pretty well.","title":"Inline HTML"},{"location":"mdcheat.html#horizontal-rule","text":"Three or more... --- Hyphens *** Asterisks ___ Underscores Three or more\u2026 Hyphens Asterisks Underscores","title":"Horizontal Rule"},{"location":"mdcheat.html#line-breaks","text":"My basic recommendation for learning how line breaks work is to experiment and discover \u2013 hit <Enter> once (i.e., insert one newline), then hit it twice (i.e., insert two newlines), see what happens. You\u2019ll soon learn to get what you want. \u201cMarkdown Toggle\u201d is your friend. Here are some things to try out: Here's a line for us to start with. This line is separated from the one above by two newlines, so it will be a *separate paragraph*. This line is also a separate paragraph, but... This line is only separated by a single newline, so it's a separate line in the *same paragraph*. Here\u2019s a line for us to start with. This line is separated from the one above by two newlines, so it will be a separate paragraph . This line is also begins a separate paragraph, but\u2026 This line is only separated by a single newline, so it\u2019s a separate line in the same paragraph .","title":"Line Breaks"},{"location":"mdcheat.html#youtube-videos","text":"They can\u2019t be added directly but you can add an image with a link to the video like this: <a href=\"http://www.youtube.com/watch?feature=player_embedded&v=YOUTUBE_VIDEO_ID_HERE \" target=\"_blank\"><img src=\"http://img.youtube.com/vi/YOUTUBE_VIDEO_ID_HERE/0.jpg\" alt=\"IMAGE ALT TEXT HERE\" width=\"240\" height=\"180\" border=\"10\" /></a> Or, in pure Markdown, but losing the image sizing and border: [![IMAGE ALT TEXT HERE](http://img.youtube.com/vi/YOUTUBE_VIDEO_ID_HERE/0.jpg)](http://www.youtube.com/watch?v=YOUTUBE_VIDEO_ID_HERE) Referencing a bug by #bugID in your git commit links it to the slip. For example #1.","title":"YouTube Videos"},{"location":"mdcheat.html#admonition","text":"!!! type \"optional explicit title within double quotes\" Any number of other indented markdown elements. This is the second paragraph. Some title Any number of other indented markdown elements. This is the second paragraph. And this is outside the admonition again. If you don\u2019t want a title, use a blank string \u201c\u201d. Don\u2019t do this at home! rST suggests the following \u201ctypes\u201d: attention, caution, danger, error, hint, important, note, tip, and warning: Some title This is type note Some title This is type hint Some title This is type tip Some title This is type important Some title This is type attention Some title This is type caution Some title This is type warning Some title This is type danger Some title This is type error","title":"Admonition"},{"location":"mdcheat.html#abbreviations","text":"The HTML specification is maintained by the W3C. *[HTML]: Hyper Text Markup Language *[W3C]: World Wide Web Consortium The HTML specification is maintained by the W3C .","title":"Abbreviations"},{"location":"mdcheat.html#definition-lists","text":"Apple : Pomaceous fruit of plants of the genus Malus in the family Rosaceae. Orange : The fruit of an evergreen tree of the genus Citrus. Apple Pomaceous fruit of plants of the genus Malus in the family Rosaceae. Orange The fruit of an evergreen tree of the genus Citrus.","title":"Definition Lists"},{"location":"mdcheat.html#footnotes","text":"Footnotes 1 have a label 2 and the footnote\u2019s content. Another Footnote 3 License: CC-BY This is a footnote content. \u21a9 A footnote on the label: \u201c@#$%\u201d. \u21a9 Another content \u21a9","title":"Footnotes"},{"location":"overview.html","text":"UBELIX - Overview Description This page provides a high-level system overview of a HPC cluster such as UBELIX. It describes the different hardware components that constitute the cluster and gives a quantitative list of the different generations of compute nodes in UBELIX. UBELIX (University of Bern Linux Cluster) is a HPC cluster that currently consists of about 330 compute nodes featuring almost 6\u2018300 CPU cores and 300\u2018000 GPU cores and a software-defined storage infrastructure providing ~580 TB of disk storage net. UBELIX is a heterogeneous cluster, meaning UBELIX consists of different generations of compute nodes with different instruction sets. Compute nodes, front-end servers and the storage are interconnected through a high speed Infiniband network. The front-end servers also provide a link to the outside world. UBELIX is used by various institutes and research groups within chemistry, biology, physics, astronomy, computer science, geography, medical radiology and others for scientific research and by students working on their thesis. High-level system overview Login Server AKA Submit Server A user connects to the cluster by logging into the submit host via SSH. You can use this host for medium-performance tasks, e.g. to edit files or to compile programs. Resource-demanding/high-performance tasks must be submitted to the batch queuing system as jobs, and will finally run on one or multiple compute nodes. Even long running compile tasks could fit as a job on a compute instead of running it on the submit host Batch-Queueing System On UBELIX we use the open-source batch-queueing system Slurm for executing jobs on a pool of cooperating compute nodes. Slurm manages the distributed resources provided by the compute nodes and is responsible for accepting, scheduling, dispatching, and managing the remote and distributed execution of sequential, parallel or interactive user jobs. Cluster Partitions (Queues) and their Compute Nodes Partitions group nodes into logical sets. Nodes in a partition share the same limits. You can choose a partition depending on your jobs requirements (CPUs, memory, runtime). UBELIX provides several different partitions as shown in the following table including the corresponding hardware details of the compute nodes each partition is comprised of: Partition name max runtime (wall clock time) in h max memory per node max cores/node GPU Node Group CPU Generation #Nodes #Cores RAM Local Scratch all 96h 243GB 20 cores - hnodes[23-42] jnodes knodes anodes[145-216] sandybridge sandybridge ivybridge broadwell 20 21 36 72 16 16 16 20 70GB 243GB 117GB 117GB 250GB 500GB 850GB 850GB empi 24h 117GB 20 cores - anodes[003-144] broadwell 142 20 117GB 850GB long 1 360h 86GB 24 - hnode[43-49] ivybridge 7 24 86GB 500Gb debug 10m 117GB 20 cores - anodes[001-002] broadwell 2 20 117GB 850 gpu 2 24h 243GB 24 GTX 1080Ti Tesla P100 RTX 2080Ti gnode[01-06] gnode[07-08] gnode[09-10] broadwell 6 2 2 24 243 GB 850GB gpu-debug 10m 243GB 24 GTX 1080Ti gnode[11-12] broadwell 12 24 243 GB 850GB The all partition is the default partition if you do not specify one explicitly. Storage Infrastructure A modular, software-defined storage system (IBM Spectrum Scale) provides a shared, parallel file system that is mounted on all frontend servers and compute nodes. Ubelix also provides a limited amount of storage space on the Campus Storage. The different storage locations are summarized in the table below. For more information about the storage infrastructure see here. Path Connection Availability Backup Quota /home/ubelix/ / Network global no yes 3 /home/storage/ / Network submit host yes yes 4 Due to the limited resources and the potentially long job runtime, access to the long partition must be requested explicitly once. \u21a9 The gpu partition is closed by definition. If you need GPU resources, you have request access to this partition. Write an email to hpc@id.unibe.ch to do so. \u21a9 Default: 3TB/user, 15TB/group \u21a9 Default: 50GB/user \u21a9","title":"Overview"},{"location":"overview.html#ubelix-overview","text":"","title":"UBELIX - Overview"},{"location":"overview.html#description","text":"This page provides a high-level system overview of a HPC cluster such as UBELIX. It describes the different hardware components that constitute the cluster and gives a quantitative list of the different generations of compute nodes in UBELIX. UBELIX (University of Bern Linux Cluster) is a HPC cluster that currently consists of about 330 compute nodes featuring almost 6\u2018300 CPU cores and 300\u2018000 GPU cores and a software-defined storage infrastructure providing ~580 TB of disk storage net. UBELIX is a heterogeneous cluster, meaning UBELIX consists of different generations of compute nodes with different instruction sets. Compute nodes, front-end servers and the storage are interconnected through a high speed Infiniband network. The front-end servers also provide a link to the outside world. UBELIX is used by various institutes and research groups within chemistry, biology, physics, astronomy, computer science, geography, medical radiology and others for scientific research and by students working on their thesis.","title":"Description"},{"location":"overview.html#high-level-system-overview","text":"","title":"High-level system overview"},{"location":"overview.html#login-server-aka-submit-server","text":"A user connects to the cluster by logging into the submit host via SSH. You can use this host for medium-performance tasks, e.g. to edit files or to compile programs. Resource-demanding/high-performance tasks must be submitted to the batch queuing system as jobs, and will finally run on one or multiple compute nodes. Even long running compile tasks could fit as a job on a compute instead of running it on the submit host","title":"Login Server AKA Submit Server"},{"location":"overview.html#batch-queueing-system","text":"On UBELIX we use the open-source batch-queueing system Slurm for executing jobs on a pool of cooperating compute nodes. Slurm manages the distributed resources provided by the compute nodes and is responsible for accepting, scheduling, dispatching, and managing the remote and distributed execution of sequential, parallel or interactive user jobs.","title":"Batch-Queueing System"},{"location":"overview.html#cluster-partitions-queues-and-their-compute-nodes","text":"Partitions group nodes into logical sets. Nodes in a partition share the same limits. You can choose a partition depending on your jobs requirements (CPUs, memory, runtime). UBELIX provides several different partitions as shown in the following table including the corresponding hardware details of the compute nodes each partition is comprised of: Partition name max runtime (wall clock time) in h max memory per node max cores/node GPU Node Group CPU Generation #Nodes #Cores RAM Local Scratch all 96h 243GB 20 cores - hnodes[23-42] jnodes knodes anodes[145-216] sandybridge sandybridge ivybridge broadwell 20 21 36 72 16 16 16 20 70GB 243GB 117GB 117GB 250GB 500GB 850GB 850GB empi 24h 117GB 20 cores - anodes[003-144] broadwell 142 20 117GB 850GB long 1 360h 86GB 24 - hnode[43-49] ivybridge 7 24 86GB 500Gb debug 10m 117GB 20 cores - anodes[001-002] broadwell 2 20 117GB 850 gpu 2 24h 243GB 24 GTX 1080Ti Tesla P100 RTX 2080Ti gnode[01-06] gnode[07-08] gnode[09-10] broadwell 6 2 2 24 243 GB 850GB gpu-debug 10m 243GB 24 GTX 1080Ti gnode[11-12] broadwell 12 24 243 GB 850GB The all partition is the default partition if you do not specify one explicitly.","title":"Cluster Partitions (Queues) and their Compute Nodes"},{"location":"overview.html#storage-infrastructure","text":"A modular, software-defined storage system (IBM Spectrum Scale) provides a shared, parallel file system that is mounted on all frontend servers and compute nodes. Ubelix also provides a limited amount of storage space on the Campus Storage. The different storage locations are summarized in the table below. For more information about the storage infrastructure see here. Path Connection Availability Backup Quota /home/ubelix/ / Network global no yes 3 /home/storage/ / Network submit host yes yes 4 Due to the limited resources and the potentially long job runtime, access to the long partition must be requested explicitly once. \u21a9 The gpu partition is closed by definition. If you need GPU resources, you have request access to this partition. Write an email to hpc@id.unibe.ch to do so. \u21a9 Default: 3TB/user, 15TB/group \u21a9 Default: 50GB/user \u21a9","title":"Storage Infrastructure"},{"location":"user-guide/file-system-quota.html","text":"File System Quota","title":"File System Quota"},{"location":"user-guide/file-system-quota.html#file-system-quota","text":"","title":"File System Quota"},{"location":"user-guide/file-transfer.html","text":"File Transfer from/to UBELIX","title":"File Transfer"},{"location":"user-guide/file-transfer.html#file-transfer-fromto-ubelix","text":"","title":"File Transfer from/to UBELIX"},{"location":"user-guide/getting-started.html","text":"Getting Started This page is intended as a brief introduction into HPC and to get you up and running with Ubelix. This hands-on introduction targets primarily users without prior knowledge in high-performance computing. However, basic Linux knowledge is a prerequisite. If you are not familiar with basic Linux commands, there are many beginner tutorials available online. After reading this section you will have composed and submitted your first job successfully to the cluster. Links are provided throughout the text to point you to the user guide which contains more in-depth information on the topic. Request an Account Staff and students of the University of Bern must have their Campus Account (CA) unlocked for UBELIX. External researchers that collaborate with an institute of the University of Bern must apply for a CA through that institute. See here for more information getting access to UBELIX. Training Courses ScITS regularly conducts introductory and advanced courses on Linux, UBELIX and other topics. Details oultined on their pages . Cluster Rules As everywhere where people come together, rules are needed on Ubelix to allow for a good cooperation and to enable a positive HPC experience. Be always aware that you are working on a shared system where your behavior could have a negative impact on the workflow of other users. Please find the list of the most important rules and guidelines in our code of conduct . Login To connect to the cluster, you must log in to the submit host from inside the university network (e.g. from a workstation on the campus). If you want to connect from a remote location (e.g. from your computer at home) you must first establish a VPN connection to get access to the university network. To connect from a UNIX-like system (Linux, Mac OS X) simply use a secure shell (SSH) to log in to the submit host: ssh <username>@submit.unibe.ch # the following is equvalent ssh -l <username> submit.unibe.ch Welcome Home After successful login to the cluster, your will find yourself in the directory /home/ubelix/ / /. This is your home directory and serves as the repository for your personal files, direcotries and programs. You can reference your home directory by ~ or $HOME. Your home directory is located on a shared file system. Therefore, all your files, programs and directory structure are always available on all cluster nodes and must hence not be copied between those nodes. We provide no backup service for data in your home directory. It is your own responsibility to backup important data to a private location. Disk space is managed by quotas . By default, each user has 3TB of disk space available. Keep your home directory clean by regularly deleting old data or by moving data to a private storage. You can always print the current working directory using the pwd (print working directory) command: pwd /home/ubelix/test/testuser Move Data At some point, you will probably need to copy files between your local computer and the cluster. There are different ways to achieve this, depending on your local operating system (OS). To copy a file from your local computer running a UNIX-like OS use the secure copy command (scp) on your local workstation: scp /path/to/file <username>@submit.unibe.ch:/path/to/target_dir/ To copy a file from the cluster to your local computer running a UNIX-like OS also use the secure copy command (scp) on your local workstation: scp <username>@submit.unibe.ch:/path/to/file /path/to/target_dir/ More information about file transfer can be found on the page File Transfer to/from UBELIX . Use Software On Ubelix you can make use of already preinstalled software or you can compile and install your own software. We use a module system to manage different versions of the same software. This allows you to focus on getting your work done instead of compilling software. E.g. to get a list of all provided versions of the GNU Compiler Collection (GCC), use: module avail To load GCC version 4.9, use: module load gcc/4.9 Now, you are using this specific version of GCC: gcc --version gcc ( GCC ) 4 .9.3 Copyright ( C ) 2015 Free Software Foundation, Inc. This is free software ; see the source for copying conditions. There is NO warranty ; not even for MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. Scope The loaded version of a software is only active in your current session. If you open a new shell you are again using the default version of the software. Therefore, it is crucial to load the required modules from within your job script. The Software is dedicated to this topic. More information can be found there. Hello World Finally, it\u2019s time for your first job. To do some work on the cluster, you require certain ressources (e.g. CPUs and memory) and a description of the computations to be done. A job consits of instructions to the scheduler in the form of option flags, and statements that describe the actual tasks. Let\u2019s start with the instructions to the scheduler: 1 2 3 4 5 6 7 8 #!/bin/bash #SBATCH --mail-user=<your_email_address> #SBATCH --mail-type=none #SBATCH --partition=all #SBATCH --nodes=1 #SBATCH --ntasks-per-node=1 # Put your code below this line The first line makes sure that the file is executed using the bash shell. The remaining lines are option flags used by the sbatch command. The page Jobs Submission outlines the most important options of sbatch . Now, let\u2019s write a simple \u201chello, world\u201d-task: 1 2 3 4 5 # Put your code below this line mkdir -p $HOME /my_first_job cd $HOME /my_first_job echo \"Hello, Ubelix from node $( hostname ) \" > hello.txt sleep 120 In the first line we create a new directory \u2018my_first_job\u2019 within our home directory. The variable $HOME expands to /home/ubelix/<your_group>/<your_username> . In the second line we change directory to the newly created directory. In the third line we print the line \u201cHello, Ubelix from node \u201d and redirect the output to a file named hello.txt . The expression $(hostname) means, run the command hostname and put its output here. In the forth line we wait (do nothing) for 120 seconds. This gives us some time to monitor our job later on. Save the content to a file named first.sh. The complete job script looks like this: 1 2 3 4 5 6 7 8 9 10 11 12 13 #!/bin/bash #SBATCH --mail-user=<your_email_address> #SBATCH --mail-type=end,fail #SBATCH --job-name=\"job01\" #SBATCH --partition=all #SBATCH --nodes=1 #SBATCH --ntasks-per-node=1 # Put your code below this line mkdir -p $HOME /my_first_job cd $HOME /my_first_job echo \"Hello, Ubelix from node $( hostname ) \" > hello.txt sleep 120 Use Correct Emai Addresss! When using a mail-type other than \u2018none\u2019, make sure that you use a valid email address with the \u2013mail-user option! Schedule Your Job We can now submit our first job to the scheduler. The scheduler will then provide the requested resources to the job. If all requested resources are already available, then your job can start immediately. Otherwise your job will wait until enough resources are available. We submit our job to the scheduler using the sbatch command: sbatch first.sh Submitted batch job 32490640 If the job is submitted successfully, the command outputs a job-ID with which you can refer to your job later on. Monitor Your Job You can inspect the state of our active jobs (running or pending) with the squeue command: squeue --job = 32490640 JOBID PARTITION NAME USER ST TIME NODES NODELIST(REASON) 32490640 all job01 testuser R 0:22 1 fnode23 Here you can see that the job \u2018job01\u2019 with job-ID 32490640 is in state RUNNING (R). The job is running in the \u2018all\u2019 partition (default partition) on fnode23 for 22 seconds. It is also possible that the job can not start immediately after submitting it to Slurm because the requested resources are not yet available. In this case, the output could look like this: squeue --job = 32490640 JOBID PARTITION NAME USER ST TIME NODES NODELIST(REASON) 32490640 all job01 testuser PD 0:00 1 (Priority) Here you can see that the job is in state PENDING (PD) and a reason why the job is pending. In this example, the job has to wait for at least one higher priorised job to run. See here for a list of other reasons why a job might be pending. You can always list all your active (pending or running) jobs with squeue: squeue --user = testuser JOBID PARTITION NAME USER ST TIME NODES NODELIST(REASON) 34651451 all slurm.sh testuser PD 0:00 2 (Priority) 34651453 all slurm.sh testuser PD 0:00 2 (Priority) 29143227 empi Rjob testuser PD 0:00 4 (JobHeldUser) 37856328 empi mpi.sh testuser R 4:38 2 anode[041-042] 32634559 all fast.sh testuser R 2:52:37 1 hnode12 32634558 all fast.sh testuser R 3:00:54 1 hnode14 32634554 all fast.sh testuser R 4:11:26 1 jnode08 32633556 all fast.sh testuser R 4:36:10 1 jnode08","title":"Getting Started"},{"location":"user-guide/getting-started.html#getting-started","text":"This page is intended as a brief introduction into HPC and to get you up and running with Ubelix. This hands-on introduction targets primarily users without prior knowledge in high-performance computing. However, basic Linux knowledge is a prerequisite. If you are not familiar with basic Linux commands, there are many beginner tutorials available online. After reading this section you will have composed and submitted your first job successfully to the cluster. Links are provided throughout the text to point you to the user guide which contains more in-depth information on the topic.","title":"Getting Started"},{"location":"user-guide/getting-started.html#request-an-account","text":"Staff and students of the University of Bern must have their Campus Account (CA) unlocked for UBELIX. External researchers that collaborate with an institute of the University of Bern must apply for a CA through that institute. See here for more information getting access to UBELIX.","title":"Request an Account"},{"location":"user-guide/getting-started.html#training-courses","text":"ScITS regularly conducts introductory and advanced courses on Linux, UBELIX and other topics. Details oultined on their pages .","title":"Training Courses"},{"location":"user-guide/getting-started.html#cluster-rules","text":"As everywhere where people come together, rules are needed on Ubelix to allow for a good cooperation and to enable a positive HPC experience. Be always aware that you are working on a shared system where your behavior could have a negative impact on the workflow of other users. Please find the list of the most important rules and guidelines in our code of conduct .","title":"Cluster Rules"},{"location":"user-guide/getting-started.html#login","text":"To connect to the cluster, you must log in to the submit host from inside the university network (e.g. from a workstation on the campus). If you want to connect from a remote location (e.g. from your computer at home) you must first establish a VPN connection to get access to the university network. To connect from a UNIX-like system (Linux, Mac OS X) simply use a secure shell (SSH) to log in to the submit host: ssh <username>@submit.unibe.ch # the following is equvalent ssh -l <username> submit.unibe.ch","title":"Login"},{"location":"user-guide/getting-started.html#welcome-home","text":"After successful login to the cluster, your will find yourself in the directory /home/ubelix/ / /. This is your home directory and serves as the repository for your personal files, direcotries and programs. You can reference your home directory by ~ or $HOME. Your home directory is located on a shared file system. Therefore, all your files, programs and directory structure are always available on all cluster nodes and must hence not be copied between those nodes. We provide no backup service for data in your home directory. It is your own responsibility to backup important data to a private location. Disk space is managed by quotas . By default, each user has 3TB of disk space available. Keep your home directory clean by regularly deleting old data or by moving data to a private storage. You can always print the current working directory using the pwd (print working directory) command: pwd /home/ubelix/test/testuser","title":"Welcome Home"},{"location":"user-guide/getting-started.html#move-data","text":"At some point, you will probably need to copy files between your local computer and the cluster. There are different ways to achieve this, depending on your local operating system (OS). To copy a file from your local computer running a UNIX-like OS use the secure copy command (scp) on your local workstation: scp /path/to/file <username>@submit.unibe.ch:/path/to/target_dir/ To copy a file from the cluster to your local computer running a UNIX-like OS also use the secure copy command (scp) on your local workstation: scp <username>@submit.unibe.ch:/path/to/file /path/to/target_dir/ More information about file transfer can be found on the page File Transfer to/from UBELIX .","title":"Move Data"},{"location":"user-guide/getting-started.html#use-software","text":"On Ubelix you can make use of already preinstalled software or you can compile and install your own software. We use a module system to manage different versions of the same software. This allows you to focus on getting your work done instead of compilling software. E.g. to get a list of all provided versions of the GNU Compiler Collection (GCC), use: module avail To load GCC version 4.9, use: module load gcc/4.9 Now, you are using this specific version of GCC: gcc --version gcc ( GCC ) 4 .9.3 Copyright ( C ) 2015 Free Software Foundation, Inc. This is free software ; see the source for copying conditions. There is NO warranty ; not even for MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. Scope The loaded version of a software is only active in your current session. If you open a new shell you are again using the default version of the software. Therefore, it is crucial to load the required modules from within your job script. The Software is dedicated to this topic. More information can be found there.","title":"Use Software"},{"location":"user-guide/getting-started.html#hello-world","text":"Finally, it\u2019s time for your first job. To do some work on the cluster, you require certain ressources (e.g. CPUs and memory) and a description of the computations to be done. A job consits of instructions to the scheduler in the form of option flags, and statements that describe the actual tasks. Let\u2019s start with the instructions to the scheduler: 1 2 3 4 5 6 7 8 #!/bin/bash #SBATCH --mail-user=<your_email_address> #SBATCH --mail-type=none #SBATCH --partition=all #SBATCH --nodes=1 #SBATCH --ntasks-per-node=1 # Put your code below this line The first line makes sure that the file is executed using the bash shell. The remaining lines are option flags used by the sbatch command. The page Jobs Submission outlines the most important options of sbatch . Now, let\u2019s write a simple \u201chello, world\u201d-task: 1 2 3 4 5 # Put your code below this line mkdir -p $HOME /my_first_job cd $HOME /my_first_job echo \"Hello, Ubelix from node $( hostname ) \" > hello.txt sleep 120 In the first line we create a new directory \u2018my_first_job\u2019 within our home directory. The variable $HOME expands to /home/ubelix/<your_group>/<your_username> . In the second line we change directory to the newly created directory. In the third line we print the line \u201cHello, Ubelix from node \u201d and redirect the output to a file named hello.txt . The expression $(hostname) means, run the command hostname and put its output here. In the forth line we wait (do nothing) for 120 seconds. This gives us some time to monitor our job later on. Save the content to a file named first.sh. The complete job script looks like this: 1 2 3 4 5 6 7 8 9 10 11 12 13 #!/bin/bash #SBATCH --mail-user=<your_email_address> #SBATCH --mail-type=end,fail #SBATCH --job-name=\"job01\" #SBATCH --partition=all #SBATCH --nodes=1 #SBATCH --ntasks-per-node=1 # Put your code below this line mkdir -p $HOME /my_first_job cd $HOME /my_first_job echo \"Hello, Ubelix from node $( hostname ) \" > hello.txt sleep 120 Use Correct Emai Addresss! When using a mail-type other than \u2018none\u2019, make sure that you use a valid email address with the \u2013mail-user option!","title":"Hello World"},{"location":"user-guide/getting-started.html#schedule-your-job","text":"We can now submit our first job to the scheduler. The scheduler will then provide the requested resources to the job. If all requested resources are already available, then your job can start immediately. Otherwise your job will wait until enough resources are available. We submit our job to the scheduler using the sbatch command: sbatch first.sh Submitted batch job 32490640 If the job is submitted successfully, the command outputs a job-ID with which you can refer to your job later on.","title":"Schedule Your Job"},{"location":"user-guide/getting-started.html#monitor-your-job","text":"You can inspect the state of our active jobs (running or pending) with the squeue command: squeue --job = 32490640 JOBID PARTITION NAME USER ST TIME NODES NODELIST(REASON) 32490640 all job01 testuser R 0:22 1 fnode23 Here you can see that the job \u2018job01\u2019 with job-ID 32490640 is in state RUNNING (R). The job is running in the \u2018all\u2019 partition (default partition) on fnode23 for 22 seconds. It is also possible that the job can not start immediately after submitting it to Slurm because the requested resources are not yet available. In this case, the output could look like this: squeue --job = 32490640 JOBID PARTITION NAME USER ST TIME NODES NODELIST(REASON) 32490640 all job01 testuser PD 0:00 1 (Priority) Here you can see that the job is in state PENDING (PD) and a reason why the job is pending. In this example, the job has to wait for at least one higher priorised job to run. See here for a list of other reasons why a job might be pending. You can always list all your active (pending or running) jobs with squeue: squeue --user = testuser JOBID PARTITION NAME USER ST TIME NODES NODELIST(REASON) 34651451 all slurm.sh testuser PD 0:00 2 (Priority) 34651453 all slurm.sh testuser PD 0:00 2 (Priority) 29143227 empi Rjob testuser PD 0:00 4 (JobHeldUser) 37856328 empi mpi.sh testuser R 4:38 2 anode[041-042] 32634559 all fast.sh testuser R 2:52:37 1 hnode12 32634558 all fast.sh testuser R 3:00:54 1 hnode14 32634554 all fast.sh testuser R 4:11:26 1 jnode08 32633556 all fast.sh testuser R 4:36:10 1 jnode08","title":"Monitor Your Job"},{"location":"user-guide/job-management/job-submission.html","text":"Job Submission","title":"Job Submission"},{"location":"user-guide/job-management/job-submission.html#job-submission","text":"","title":"Job Submission"}]}